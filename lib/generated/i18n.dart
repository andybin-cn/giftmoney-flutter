import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "礼金小助手"
  String get app_name => "礼金小助手";
  /// "记录"
  String get tab_record => "记录";
  /// "统计"
  String get tab_chart => "统计";
  /// "辅助"
  String get tab_accessibility => "辅助";
  /// "我的"
  String get tab_mine => "我的";
  /// "已上传"
  String get bt_upload_success => "已上传";
  /// "未上传"
  String get bt_upload_waiting => "未上传";
  /// "上传失败"
  String get bt_upload_waring => "上传失败";
  /// "正在上传"
  String get bt_upload_uploading => "正在上传";
  /// "保存"
  String get bt_save => "保存";
  /// "姓名"
  String get form_person_name => "姓名";
  /// "关系"
  String get form_relation => "关系";
  /// "事件名称"
  String get form_event_name => "事件名称";
  /// "事件时间"
  String get form_event_time => "事件时间";
  /// "金额"
  String get form_amount => "金额";
  /// "礼物"
  String get form_gift => "礼物";
  /// "类型"
  String get form_type => "类型";
  /// "收份子"
  String get form_in_account => "收份子";
  /// "送份子"
  String get form_out_account => "送份子";
  /// "正在保存"
  String get hud_saving => "正在保存";
  /// "正在加载"
  String get hud_loading => "正在加载";
  /// "保存成功"
  String get hud_save_success => "保存成功";
}

class _I18n_zh_CN extends I18n {
  const _I18n_zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_zh_TW extends _I18n_zh_CN {
  const _I18n_zh_TW();


  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "CN"),
      Locale("zh", "TW")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("zh_CN" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("zh_TW" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_TW());
    }
    else if ("zh" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}